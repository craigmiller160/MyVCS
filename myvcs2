#!/bin/bash
# SCRIPT
# NAME: myvcs
# DESCRIPTION: This script is the main executible for the myvcs script
#				series. It is the entry point for all script commands,
#				and it will call all the other scripts associated with it.
# OPTIONS:
#			[command] : (Required) The name of the command that this script will execute.
#							Each command calls another script for that specific function.
#			[options...] : (Optional) The various sub-scripts require various amounts of
#							options. What will and won't be required varies depending on
#							which command is used.

# Get the directory the script initializes from. This is either the myvcs directory or the location that myvcs has been simlinked to
INIT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# Get the current directory the shell is in at initialization
CURRENT_DIR=$(pwd)

###TODO need to add color styling for errors to this

#### TODO document this
function validate_yes_no {

	case $1 in
		n)
			return 0
		;;
		y)
			return 0
		;;
		'')
			return 1
		;;
		*)
			echo "  Invalid entry! Please try again."
			return 1
		;;
	esac

}

#### TODO document this
function validate_not_empty {

	case $1 in
		'')
			return 1
		;;
		*)
			return 0
		;;
	esac

}

####TODO document this
function validate_path {

	case $1 in
		'')
			return 1
		;;
		*)
			if [ -d $1 ]; then
				return 0
			else
				echo "  Error! Directory doesn't exist"
				return 1
			fi
		;;
	esac

}

### TODO document this
function initial_configure_myvcs {

	echo "  Myvcs does not appear to be configured. This is expected with a first time run, but can also be due to changes in how it is accessed from your PATH."
	echo ""

	configure=""
	validate_yes_no
	while [[ $? -ne 0 ]]; do
		printf "  Do you want to start the configuration process now? (y/n): "
		read configure
		validate_yes_no $configure
	done

	if [ $configure == 'n' ]; then
		echo ""
		echo "  Thank you. Please return to this configuration tool when you are ready."
		exit 0
	fi

	echo ""
	echo "  CONFIGURE ACCESS FROM PATH"

	echo ""
	echo "  For ideal performance, the myvcs application needs to be available on your system's PATH, either directory or through a simlink."
	echo "  This should be done first, prior to other configuration. Once that is done, the rest of the configuration can begin."
	echo ""

	begin=""
	validate_yes_no
	while [[ $? -ne 0 ]]; do
		printf "  Have you completed myvcs PATH access configuration? (y/n): "
		read begin
		validate_yes_no $begin
	done

	if [ $begin == 'n' ]; then
		echo ""
		echo "  Thank you. Please return to this configuration tool when myvcs is accessible from your PATH."
		exit 0
	fi

	echo ""
	echo "  INSTALLATION LOCATION"
	echo ""

	echo "  For proper operation, myvcs needs to know where it is located."
	echo "  Please enter the full path, from the root of the filesystem, to where myvcs is installed."
	echo ""
	
	path=""
	validate_path $path
	while [[ $? -ne 0 ]]; do
		printf "  myvcs path: "
		read path
		validate_path $path
	done

	printf "# Special file for simlinked calls to myvcs.\n# Defines the actual path to the myvcs directory.\n\nMYVCS_PATH=$path" > "$INIT_DIR/.myvcs-path.properties"

	echo "Done"

	return 0

}

#### TODO document this
function configure_properties {

	# Opening text
	echo ""
	echo "  CONFIGURE PROPERTIES"
	echo ""
	echo "  Myvcs requires a series of environment properties to be set in order to operate."
	echo ""

	# Prompt the user if they want to begin the configuration
	begin=""
	validate_yes_no
	while [[ $? -ne 0 ]]; do
		printf "  Do you want to configure myvcs environment properties now? (y/n): "
		read begin
		validate_yes_no $begin
	done

	# If they chose not to begin the configuration, exit gracefully
	if [ $begin == 'n' ]; then
		echo ""
		echo "  Thank you. Please return to this configuration tool when you are ready to finish setting up myvcs."
		exit 0
	fi

	# If the TAG variable doesn't exist, just set it silently
	if [ -z "$TAG" ]; then
		TAG="[myvcs]:"
	fi

	# If the GIT_TRUNK variable doens't exist, just set it silently
	if [ -z "$GIT_TRUNK" ]; then
		GIT_TRUNK="master"
	fi

	# Development Root Path Variable section
	echo ""
	echo "  DEVELOPMENT ROOT PATH"
	echo ""

	# If DEV_ROOT_PATH already exists, ask if user wants to change it
	setvariable=false
	if [ -n "$DEV_ROOT_PATH" ]; then
		echo "  Myvcs needs to know the location of your Development Root. This is a folder that will contain subfolders for each branch you work on."
		echo "  The Development Root Path is currently set to: $DEV_ROOT_PATH"
		echo ""

		result=""
		validate_yes_no $result
		while [[ $? -ne 0 ]]; do
			printf "  Do you want to change this path? (y/n): "
			read result
			validate_yes_no $result
		done

		if [ $result = 'y' ]; then
			setvariable=true
		fi
	else
		setvariable=true
	fi

	# If need to set DEV_ROOT_PATH, prompt user for it
	if $setvariable ; then
		echo "  Please specify the absolute path to the root development directory on this machine."
		echo "  This directory MUST already exist in order to be used, it will NOT be created."
		echo ""

		DEV_ROOT_PATH=""
		validate_path "$DEV_ROOT_PATH"
		while [[ $? -ne 0 ]]; do
			printf "  Dev Root Path: "
			read DEV_ROOT_PATH
			validate_path "$DEV_ROOT_PATH"
		done
	fi

	# Dev Main Dir section
	echo ""
	echo "  DEVELOPMENT MAIN DIRECTORY"
	echo ""

	# If DEV_MAIN_DIR exists, ask if the user wants to change it
	setvariable=false
	if [ -n "$DEV_MAIN_DIR" ]; then
		echo "  Within the Development Root, a single folder will be the Development Main directory."
		echo "  This folder will be your SVN directory, and will be kept up to date with SVN trunk."
		echo "  The Development Main directory name is currently set to: $DEV_MAIN_DIR"
		echo ""

		result=""
		validate_yes_no $result
		while [[ $? -ne 0 ]]; do
			printf "  Do you want to change this name? (y/n): "
			read result
			validate_yes_no $result
		done

		if [ $result = 'y' ]; then
			setvariable=true
		fi
	else
		setvariable=true
	fi

	# If need to set DEV_MAIN_DIR, prompt user for it
	if $setvariable ; then
		echo "  Please specify the name of the subfolder within the root development directory on this machine."
		echo "  This directory MUST already exist in order to be used, it will NOT be created."
		echo ""

		DEV_MAIN_DIR=""
		validate_not_empty "$DEV_MAIN_DIR"
		while [[ $? -ne 0 ]]; do
			printf "  Dev Main Directory: "
			read DEV_MAIN_DIR
			validate_not_empty "$DEV_MAIN_DIR"
			if [ $? -eq 0 ]; then
				validate_path "$DEV_ROOT_PATH/$DEV_MAIN_DIR"
			fi
		done
	fi

	# Set the DEV_MAIN_PATH based on the previously set values
	DEV_MAIN_PATH="$DEV_ROOT_PATH/$DEV_MAIN_DIR"

	# Check if set values meet with user approval.
	echo ""
	echo "  APPROVE CURRENT PATHS"
	echo ""
	echo "  The following paths will be set for the directories you will be working in using myvcs:"
	echo ""
	echo "  Dev Root Path: $DEV_ROOT_PATH"
	echo "  Dev Main Path: $DEV_MAIN_PATH"
	echo ""

	#### TODO add ability to set SVN URLs
	#### TODO add ability to set git remote origin for backup

	save=""
	validate_yes_no $save
	while [[ $? -ne 0 ]]; do
		printf "  Do you want to set these as your myvcs properties? (y/n): "
		read save
		validate_yes_no $save
	done

	# If the user chooses to save, then write all the configuration to the file
	if [ $save = 'y' ]; then
		echo "# myvcs configuration properties" > $MYVCS_PATH/myvcs-config.properties
		echo "" >> $MYVCS_PATH/myvcs-config.properties
		echo "# Has myvcs had initial configuration" >> $MYVCS_PATH/myvcs-config.properties
		echo "INITIAL_CONFIG=true" >> $MYVCS_PATH/myvcs-config.properties
		echo "" >> $MYVCS_PATH/myvcs-config.properties
		echo "# Prefix tag for all output" >> $MYVCS_PATH/myvcs-config.properties
		echo "TAG=$TAG" >> $MYVCS_PATH/myvcs-config.properties
		echo "" >> $MYVCS_PATH/myvcs-config.properties
		echo "# Variables for the development directory locations" >> $MYVCS_PATH/myvcs-config.properties
		echo "DEV_ROOT_PATH=\"$DEV_ROOT_PATH\"" >> $MYVCS_PATH/myvcs-config.properties
		echo "DEV_MAIN_DIR=\"$DEV_MAIN_DIR\"" >> $MYVCS_PATH/myvcs-config.properties
		echo "DEV_MAIN_PATH=\"$DEV_MAIN_PATH\"" >> $MYVCS_PATH/myvcs-config.properties
		echo "" >> $MYVCS_PATH/myvcs-config.properties
		echo "# Subversion Repository URLs" >> $MYVCS_PATH/myvcs-config.properties
		#### TODO when the SVN values are able to be set here, these lines will have to change
		echo "SVN_REPO_URL=\"https://atlantis.pilotfish-net.com/repos/XCS\"" >> $MYVCS_PATH/myvcs-config.properties
		echo "SVN_TRUNK=\"development\"" >> $MYVCS_PATH/myvcs-config.properties
		echo "SVN_BRANCHES=\"branches\"" >> $MYVCS_PATH/myvcs-config.properties
		echo "SVN_TRUNK_URL=\"$SVN_REPO_URL/$SVN_TRUNK\"" >> $MYVCS_PATH/myvcs-config.properties
		echo "SVN_BRANCHES_URL=\"$SVN_REPO_URL/$SVN_BRANCHES\"" >> $MYVCS_PATH/myvcs-config.properties
		echo "" >> $MYVCS_PATH/myvcs-config.properties
		echo "# Git Trunk Name" >> $MYVCS_PATH/myvcs-config.properties
		echo "GIT_TRUNK=\"master\"" >> $MYVCS_PATH/myvcs-config.properties
		echo ""
		echo "# Color values" >> $MYVCS_PATH/myvcs-config.properties
		echo "RED='\033[0;31m'" >> $MYVCS_PATH/myvcs-config.properties
		echo "NC='\033[0m'" >> $MYVCS_PATH/myvcs-config.properties
		echo "" >> $MYVCS_PATH/myvcs-config.properties
		echo "# Style values" >> $MYVCS_PATH/myvcs-config.properties
		printf "BOLD=$" >> $MYVCS_PATH/myvcs-config.properties
		printf "(tput bold)\n" >> $MYVCS_PATH/myvcs-config.properties
		printf "NORM=$" >> $MYVCS_PATH/myvcs-config.properties
		printf "(tput sgr0)\n" >> $MYVCS_PATH/myvcs-config.properties
	else
		echo "  Configuration changes cancelled. If any values are still missing, you will be prompted to re-enter them when you restart myvcs"
	fi

}

# Try getting the properties file path config file
source $INIT_DIR/.myvcs-path.properties 1>/dev/null 2>/dev/null

# If can't find them, start initial configuration
if [ $? -ne 0 ]; then
	initial_configure_myvcs
	source $INIT_DIR/.myvcs-path.properties 1>/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		echo ""
		echo "  Error! Still unable to locate configuration. Please try running this config utility again."
		exit 1
	fi
fi

source $MYVCS_PATH/myvcs-config.properties >/dev/null

if [ $? -ne 0 ]; then
	### TODO need to come up with a better series of conditions for the file not existing
	echo "  Error! Cannot find myvcs-config.properties"
	exit 1
fi

# If initial config is set to false, configure the properties
if [ $INITIAL_CONFIG = false ]; then
	configure_properties
fi

# If no arguments are supplied, then no command has been provided and the script cannot run
if [ $# -eq 0 ]; then
	printf "${RED}${BOLD}$TAG Error! No command specified.${NORM}${NC}\n"
	exit 1
fi

# Execute myvcs commands
case $1 in
	create)
		"$MYVCS_PATH/bin/create.sh" "$MYVCS_PATH" "${@:2}"
	;;
	svn)
		"$MYVCS_PATH/bin/svn.sh" -wd "$CURRENT_DIR" "${@:2}"
	;;
	update)
		"$MYVCS_PATH/bin/update.sh" "${@:2}"
	;;
	git)
		"$MYVCS_PATH/bin/git.sh" "${@:2}" "$CURRENT_DIR" 
	;;
	delete)
		"$MYVCS_PATH/bin/delete.sh" "${@:2}"
	;;
	config)
		configure_properties
	;;
	*)
		printf "${RED}${BOLD}$TAG Error! Invalid command.${NORM}${NC}\n"
	;;
esac

