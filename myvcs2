#!/bin/bash
# SCRIPT
# NAME: myvcs
# DESCRIPTION: This script is the main executible for the myvcs script
#				series. It is the entry point for all script commands,
#				and it will call all the other scripts associated with it.
# OPTIONS:
#			[command] : (Required) The name of the command that this script will execute.
#							Each command calls another script for that specific function.
#			[options...] : (Optional) The various sub-scripts require various amounts of
#							options. What will and won't be required varies depending on
#							which command is used.

# Get the current, starting directory location
CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

###TODO need to add color styling for errors to this

#### TODO document this
function validate_yes_no {

	case $1 in
		n)
			return 0
		;;
		y)
			return 0
		;;
		'')
			return 1
		;;
		*)
			echo "  Invalid entry! Please try again."
			return 1
		;;
	esac

}

#### TODO document this
function validate_not_empty {

	case $1 in
		'')
			return 1
		;;
		*)
			return 0
		;;
	esac

}

####TODO document this
function validate_path {

	case $1 in
		'')
			return 1
		;;
		*)
			if [ -d $1 ]; then
				return 0
			else
				echo "  Error! Directory doesn't exist"
				return 1
			fi
		;;
	esac

}

### TODO document this
function initial_configure_myvcs {

	echo "  Myvcs does not appear to be configured. This is expected with a first time run, but can also be due to changes in how it is accessed from your PATH."
	echo ""

	configure=""
	validate_yes_no
	while [[ $? -ne 0 ]]; do
		printf "  Do you want to start the configuration process now? (y/n): "
		read configure
		validate_yes_no $configure
	done

	if [ $configure == 'n' ]; then
		echo ""
		echo "  Thank you. Please return to this configuration tool when you are ready."
		exit 0
	fi

	echo ""
	echo "  CONFIGURE ACCESS FROM PATH"

	echo ""
	echo "  For ideal performance, the myvcs application needs to be available on your system's PATH, either directory or through a simlink."
	echo "  This should be done first, prior to other configuration. Once that is done, the rest of the configuration can begin."
	echo ""

	begin=""
	validate_yes_no
	while [[ $? -ne 0 ]]; do
		printf "  Have you completed myvcs PATH access configuration? (y/n): "
		read begin
		validate_yes_no $begin
	done

	if [ $begin == 'n' ]; then
		echo ""
		echo "  Thank you. Please return to this configuration tool when myvcs is accessible from your PATH."
		exit 0
	fi

	echo ""
	echo "  INSTALLATION LOCATION"
	echo ""

	echo "  For proper operation, myvcs needs to know where it is located."
	echo "  Please enter the full path, from the root of the filesystem, to where myvcs is installed."
	echo ""
	
	path=""
	validate_path $path
	while [[ $? -ne 0 ]]; do
		printf "  myvcs path: "
		read path
		validate_path $path
	done

	printf "# Special file for simlinked calls to myvcs.\n# Defines the actual path to the myvcs directory.\n\nMYVCS_PATH=$path" > "$CURRENT_DIR/.myvcs-path.properties"

	echo "Done"

	return 0

}

#### TODO document this
function configure_properties {

	echo ""
	echo "  CONFIGURE PROPERTIES"
	echo ""
	echo "  Myvcs requires a series of environment properties to be set in order to operate."
	echo ""

	begin=""
	validate_yes_no
	while [[ $? -ne 0 ]]; do
		printf "  Do you want to configure myvcs environment properties now? (y/n): "
		read begin
		validate_yes_no $begin
	done

	if [ $begin == 'n' ]; then
		echo ""
		echo "  Thank you. Please return to this configuration tool when you are ready to finish setting up myvcs."
		exit 0
	fi

	#### TODO auto-generate the TAG property if it doesn't exist

	if [ -z "$DEV_ROOT_PATH" ]; then
		echo ""
		echo "  DEVELOPMENT ROOT PATH"
		echo ""
		echo "  Please specify the absolute path to the root development directory on this machine. This directory will contain subfolders for all branches."
		echo "  This directory MUST already exist in order to be used, it will NOT be created."

		DEV_ROOT_PATH=""
		validate_path "$DEV_ROOT_PATH"
		while [[ $? -ne 0 ]]; do
			printf "  Dev Root Path: "
			read DEV_ROOT_PATH
			validate_path "$DEV_ROOT_PATH"
		done
	fi

	if [ -z "$DEV_MAIN_DIR" ]; then
		echo ""
		echo "  DEVELOPMENT MAIN DIRECTORY"
		echo ""
		echo "  Please specify the name of the subfolder within the root development directory on this machine. This directory will be on SVN and will be kept up to date with SVN trunk."
		echo "  This directory MUST already exist in order to be used, it will NOT be created."

		DEV_MAIN_DIR=""
		validate_not_empty "$DEV_MAIN_DIR"
		while [[ $? -ne 0 ]]; do
			printf "  Dev Main Directory: "
			read DEV_MAIN_DIR
			validate_not_empty "$DEV_MAIN_DIR"
			if [ $? -eq 0 ]; then
				validate_path "$DEV_ROOT_PATH/$DEV_MAIN_DIR"
			fi
		done
	fi

	DEV_MAIN_PATH="$DEV_ROOT_PATH/$DEV_MAIN_DIR"

	echo ""
	echo "  APPROVE CURRENT PATHS"
	echo ""
	echo "  The following paths will be set for the directories you will be working in using myvcs:"
	echo ""
	echo "  Dev Root Path: $DEV_ROOT_PATH"
	echo "  Dev Main Path: $DEV_MAIN_PATH"

	#### TODO add ability to set SVN URLs

}

# Try getting the properties file path config file
source $CURRENT_DIR/.myvcs-path.properties 1>/dev/null 2>/dev/null

# If can't find them, start initial configuration
if [ $? -ne 0 ]; then
	initial_configure_myvcs
	source $CURRENT_DIR/.myvcs-path.properties 1>/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		echo ""
		echo "  Error! Still unable to locate configuration. Please try running this config utility again."
		exit 1
	fi
fi

source $MYVCS_PATH/myvcs-config.properties >/dev/null

if [ $? -ne 0 ]; then
	### TODO need to come up with a better series of conditions for the file not existing
	echo "  Error! Cannot find myvcs-config.properties"
	exit 1
fi

if [ $INITIAL_CONFIG = false ]; then
	configure_properties
fi